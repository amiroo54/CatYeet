//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Settings/Main.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Main"",
    ""maps"": [
        {
            ""name"": ""MoveHorse"",
            ""id"": ""7afe0db3-f73d-4e96-8057-385708c4d9c4"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a9436665-b353-45cd-99bf-5679b949af6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af581709-53e9-4b62-b0f7-e905d8152fbf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""20c166df-b0dd-432e-9d13-c65e80515c3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""c1f2eda1-af17-414e-b920-9c062b9b171c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""13dab5c6-e99f-4825-a3f7-5d38fe98e62c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""c82d4d90-007b-424d-bc27-4c7f3b75e96d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49a6e197-4955-4d79-b328-389c3ac154af"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc86aeec-9f2b-47fb-b97e-29bd7a6ede60"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""926c2750-744d-4757-895b-3f2ce8288459"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""046e98bf-5eb8-43a8-acf8-198d07edfac6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d560cae2-733d-4c79-8bbc-43d1c4f244ed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a1b81022-79b1-4fc4-8103-4371f8afe31f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""b172f604-09f1-42bf-9b4c-d10817c75dda"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b593ec06-1f41-4745-a1fc-35ae7d89cecc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""18d1847b-cddd-4f00-aaa3-12197bacf6b6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7f694087-58e1-438c-9bb0-2c3921718ade"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1ce8e5c-a5d1-4e19-93c0-4f74fc2738af"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9482704-a4d5-4293-b2af-9403dd206dcc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""031e31ab-33bb-46a9-8670-a76c50a482fc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53137abb-b43b-42f1-a8c9-67921f51d7e8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""fa243f9c-51b9-4c8e-b6e7-73861548818e"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""18f3ba4e-2a86-4954-ab00-165ff3931b21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68e7bff4-f46b-475e-80b0-672e94f12ff1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MoveHorse
        m_MoveHorse = asset.FindActionMap("MoveHorse", throwIfNotFound: true);
        m_MoveHorse_Jump = m_MoveHorse.FindAction("Jump", throwIfNotFound: true);
        m_MoveHorse_Move = m_MoveHorse.FindAction("Move", throwIfNotFound: true);
        m_MoveHorse_Throw = m_MoveHorse.FindAction("Throw", throwIfNotFound: true);
        m_MoveHorse_Aim = m_MoveHorse.FindAction("Aim", throwIfNotFound: true);
        m_MoveHorse_Restart = m_MoveHorse.FindAction("Restart", throwIfNotFound: true);
        m_MoveHorse_Switch = m_MoveHorse.FindAction("Switch", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveHorse
    private readonly InputActionMap m_MoveHorse;
    private IMoveHorseActions m_MoveHorseActionsCallbackInterface;
    private readonly InputAction m_MoveHorse_Jump;
    private readonly InputAction m_MoveHorse_Move;
    private readonly InputAction m_MoveHorse_Throw;
    private readonly InputAction m_MoveHorse_Aim;
    private readonly InputAction m_MoveHorse_Restart;
    private readonly InputAction m_MoveHorse_Switch;
    public struct MoveHorseActions
    {
        private @MainInput m_Wrapper;
        public MoveHorseActions(@MainInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_MoveHorse_Jump;
        public InputAction @Move => m_Wrapper.m_MoveHorse_Move;
        public InputAction @Throw => m_Wrapper.m_MoveHorse_Throw;
        public InputAction @Aim => m_Wrapper.m_MoveHorse_Aim;
        public InputAction @Restart => m_Wrapper.m_MoveHorse_Restart;
        public InputAction @Switch => m_Wrapper.m_MoveHorse_Switch;
        public InputActionMap Get() { return m_Wrapper.m_MoveHorse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveHorseActions set) { return set.Get(); }
        public void SetCallbacks(IMoveHorseActions instance)
        {
            if (m_Wrapper.m_MoveHorseActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnMove;
                @Throw.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnThrow;
                @Aim.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnAim;
                @Restart.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnRestart;
                @Switch.started -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnSwitch;
                @Switch.performed -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnSwitch;
                @Switch.canceled -= m_Wrapper.m_MoveHorseActionsCallbackInterface.OnSwitch;
            }
            m_Wrapper.m_MoveHorseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
            }
        }
    }
    public MoveHorseActions @MoveHorse => new MoveHorseActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Click;
    public struct UIActions
    {
        private @MainInput m_Wrapper;
        public UIActions(@MainInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IMoveHorseActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
